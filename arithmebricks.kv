#:kivy 1.8.0
#: import Animation kivy.animation.Animation


<ArithmeBricksGame>:
    brick_width: self.width / 14.
    brick_height: self.width / 10.3

    canvas.before:
        Color:
            rgba: 0.5, 0.65, 0.9, 1
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        canvas.before:
            Color:
                rgba: 0, 0, 0.1, 1
            Rectangle:
                pos: self.pos
                size: self.size
        height: root.brick_height
        width: root.width
        x: 0
        y: 0

        Button:
            color: 0.6, 0.8, 1, 1
            size_hint: (0.08, 1)
            font_size: self.height / 2.8
            text: 'Quit'
            on_press:
                root.popup_quit(size=(root.width * 0.9, root.width * 0.3))
        Button:
            color: 0.6, 0.8, 1, 1
            size_hint: (0.08, 1)
            font_size: self.height / 2.8
            text: 'Help'
            on_press:
                root.popup_help(size=(root.width * 0.9, root.height * 0.9))
        Label:
            size_hint: (0.10, 1)
            font_size: self.height / 2.8
            align: 'center'
            text: 'Level:'
        Slider:
            id: level_slider
            size_hint: (0.4, 1)
            min: 0
            max: 9
            step: 1
        Label:
            size_hint: (0.01, 1)
            text: ''            
        Button:
            id: new_game_button
            size_hint: (0.16, 1)
            text: 'New game'
            font_size: self.height / 2.8
            on_press:
                difficulty_level = level_slider.value
                if root.playing: root.popup_new_game(size=(root.width * 0.9, root.width * 0.3), on_dismiss=(lambda popup: root.new_game(difficulty_level) if popup.user_decision else None))
                else: root.new_game(difficulty_level)


<Brick>:
    width: self.parent.brick_width if self.parent else 10
    height: self.parent.brick_height if self.parent else 10
    x: min(max(self.x, 0), self.parent.width - self.width) if self.parent else 10
    y: min(max(self.y, self.height + 2), self.parent.height - self.height) if self.parent else 10

    bold: True
    font_size: self.parent.brick_height if self.parent else 10

    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0

    detached_border_color: 0.2, 0.3, 0.55, 0.8
    move_border_color: 0.6, 0.8, 1, 0.8
    attached_border_color: 1, 0.9, 0.2, 0.5
    equal_border_color: 0.1, 1, 0.5, 0.8
    final_border_color: 0.2, 0.9, 0.2, 0.5

    border_color: self.detached_border_color

    max_snap_x_distance: 0.7 * self.width
    max_snap_y_distance: 0.66 * self.height

    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            pos: self.pos
            size: self.size

        Color:
            rgba: self.border_color
        Line:
            points: self.x, self.y, self.x + self.width, self.y, self.x + self.width, self.y + self.height, self.x, self.y + self.height, self.x, self.y
            width: 2

    on_state:
        cur_background_color = self.background_color
        target_border_color = getattr(self, args[1] + '_border_color')
        if args[1] == 'final': anim = Animation(border_color=target_border_color, background_color=self.equal_border_color, duration=0.2, t='in_out_quad') + Animation(border_color=self.equal_border_color, background_color=cur_background_color, duration=0.2, t='in_out_quad'); anim.repeat = True
        else: anim = Animation(border_color=target_border_color, duration=0.2, t='out_quint')
        anim.start(self)

    on_target_pos:
        Animation(pos=args[1], duration=0.1, t='out_bounce').start(self)


<DigitBrick>:
    color: 0.9, 0.3, 0.4, 1
    background_color: 1, 1, 0.5, 1


<OperatorBrick>:
    color: 0.2, 0.7, 0.4, 1
    background_color: 1, 1, 0.5, 1


<EqualityBrick>:
    color: 0.4, 1, 0.4, 1
    background_color: 0.4, 0.55, 1, 1


<HelpPopup>:
    title: 'How to play'
    size_hint: None, None
    title_size: min(self.width, self.height) / 16

    BoxLayout:
        orientation: 'vertical'
        padding: root.title_size
        spacing: root.title_size

        Label:
            size_hint: (1, 0.8)
            markup: True
            text: root.help_text
            text_size: (self.width - root.title_size * 2, self.height - root.title_size * 2)
            font_size: root.title_size
            halign: 'justify'
            valign: 'top'
        Button:
            size_hint: (1, 0.2)
            text: 'OK'
            font_size: root.title_size
            on_press:
                root.dismiss()


<QuitPopup>:
    title: 'Quit?'
    size_hint: None, None
    title_size: min(self.width, self.height) / 7

    BoxLayout:
        orientation: 'horizontal'
        padding: root.title_size
        spacing: root.title_size

        Button:
            size_hint: (0.5, 1)
            text: 'Yes'
            font_size: root.title_size
            on_press:
                app.stop()
        Button:
            size_hint: (0.5, 1)
            text: 'No'
            font_size: root.title_size
            on_press:
                root.dismiss()


<NewGamePopup>:
    title: 'New game?'
    size_hint: None, None
    title_size: min(self.width, self.height) / 7

    BoxLayout:
        orientation: 'horizontal'
        padding: root.title_size
        spacing: root.title_size

        Button:
            size_hint: (0.5, 1)
            text: 'Yes'
            font_size: root.title_size
            on_press:
                root.user_decision = True
                root.dismiss()
        Button:
            size_hint: (0.5, 1)
            text: 'No'
            font_size: root.title_size
            on_press:
                root.dismiss()
